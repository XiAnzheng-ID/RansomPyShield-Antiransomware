import requests
import os
import time

def get_hashes(tag="Ransomware", limit=1000):
    url = "https://mb-api.abuse.ch/api/v1/"
    headers = {"Accept": "application/json"}
    data = {
        "query": "get_taginfo",
        "tag": tag,
        "limit": limit,
    }

    response = requests.post(url, headers=headers, data=data)
    if response.status_code == 200:
        result = response.json()
        hashes = []

        # Get sha256_hash from malware bazaar
        for sample in result.get("data", []):
            hash_value = sample.get("sha256_hash")
            if hash_value:
                hashes.append(hash_value)
        
        return hashes
    else:
        print(f"Error fetching data: {response.status_code}")
        return []

def read_existing_hashes(file_path):
    # Read existing hashes from the file if it exists
    if os.path.exists(file_path):
        try:
            with open(file_path, "r") as file:
                existing_hashes = {line.strip() for line in file}
            return existing_hashes
        except Exception as e:
            print(f"Error reading file: {e}")
            return set()
    return set()  # Return an empty set if the file doesn't exist

def save_hashes_to_file(hashes, file_path="hashes.txt"):
    # Read existing hashes from file
    existing_hashes = read_existing_hashes(file_path)

    # Filter out hashes that already exist in the file
    new_hashes = [hash_value for hash_value in hashes if hash_value not in existing_hashes]

    # Append new hashes to the file
    try:
        with open(file_path, "a") as file:
            for hash_value in new_hashes:
                file.write(hash_value + "\n")
        print(f"Added {len(new_hashes)} new hashes to {file_path}")
    except Exception as e:
        print(f"Error saving file: {e}")

def update_hashes_scheduler(interval=3600):  # Default interval = 1 jam (3600 detik)
    while True:
        try:
            print("Checking for new hashes...")
            main()  # Panggil fungsi utama untuk mengambil dan menyimpan hashes baru
            print("Hashes successfully updated.")
        except Exception as e:
            print(f"Failed to update hashes: {e}")
        
        # Tunggu selama interval yang ditentukan sebelum melakukan update lagi
        time.sleep(interval)

def main():
    # Define the file path for saving hashes
    file_path = os.path.join(os.getenv('LOCALAPPDATA'), "RansomPyShield" , "hashes.txt")

    # Get hashes from the API
    hashes = get_hashes(limit=1000)

    # Save hashes to file
    save_hashes_to_file(hashes, file_path)

if __name__ == "__main__":
    main()
